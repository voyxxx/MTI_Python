'''
import copy

# Словари
'''
#коллекция пар данных ключ-значение
#все ключи уникальные, повторений быть не может
'''

student = {
    'имя': 'Иван',
    'возраст': 20,
    'курс': 'Python',
    'группа': 'A'
}

print(student)

# Вызов по ключу 

print(student['имя'])  # Выводит 'Иван'
print(student['возраст'])  # Выводит 20

# Изменение значения по ключу

student['возраст'] = 21  # Изменяем значение возраста
print(student['возраст'])  # Выводит 21


# Добавление новой пары ключ-значение

student['рейтинг'] = 4.5  # Добавляем новую пару ключ-значение
print(student)  # Выводит {'имя': 'Иван', 'возраст': 21, 'курс': 'Python', 'группа': 'A', 'рейтинг': 4.5}

# Удаление элемента по ключу

del student['группа']  # Удаляем элемент по ключу
print(student)  # Выводит {'имя': 'Иван', 'возраст': 21, 'курс': 'Python', 'рейтинг': 4.5}


# Методы словарей

student = {'имя': 'Иван', 'возраст': 20, 'курс': 'Python'}

# Получение всех ключей словаря

keys = student.keys()
print(keys)

# Получение всех значений словаря

value = student.values()
print(value)

# Получение пар ключ-значение в виде кортежа

items = student.items()
print(items)

# get(key) - возвращает значение по ключу. Если такого ключа нет, то метод отдаст None

name = student.get('день рождения')
print(name)

# pop(key) - удаляет элемент по указанному ключу, и возвращает его значение
name = student.pop('курс')
print(name)

# Копирование словарей


Метод copy() создает поверхностную копию словаря. 
Это означает, что он создает новый словарь, который содержит ссылки на те же объекты, 
что и оригинальный словарь. 
Если изменить объект, на который ссылается ключ в новом словаре или 
любом из вложенных объектов, он также будет изменен в оригинальном словаре.


original = {'a': [1, 2, 3], 'b': [4, 5, 6]}
new = original.copy()
new['a'].append(4)
print(original)  # {'a': [1, 2, 3, 4], 'b': [4, 5, 6]}

# Глубокое копирование
original = {'a': [1, 2, 3], 'b': [4, 5, 6]}
new = copy.deepcopy(original)
new['a'].append(4)
print(original)  # {'a': [1, 2, 3], 'b': [4, 5, 6]}


# Задача

Пускай у нас есть банк в который приходит икс запросов каждый запрос бывает двух типов:
Либо запрос на открытие новой ячейки с каким то ключом.
Либо мы хотим положить деньги в ячейку с каким то ключом.
И в конце нам нужно вывести что вообще получилось.
То есть какие есть ячейки сколько в них лежит денег.


bank = dict()

n = int(input('Сколько запросов пришло банку? '))

for i in range(n):
    req = input('Введите свой запрос (create или add)')
    
    if req == 'create':
        k = input('Введите ключ, с которым хотите открыть новую ячейку: ')
        bank[k] = 0
        print('Успешно!')
    
    elif req == 'add':
        k = input('Введите ключ для пополнения ячейки: ')
        amount = int(input('Введите сумму для пополнения вашей ячейки: '))
        
        if k in bank.keys():
            bank[k] += amount
            print('Успешно!')
        else:
            print('Ключ не найден')
    
    else:
        print('Неизвестная команда')

print(f'Итог на конец дня: {bank}')

'''


# Функции


# def say_hello():
#     print('Привет мир')

# say_hello()
# say_hello()
# say_hello()


# def add_numbers(number1, number2):
#     return a + b

# x = 20
# y = 25

# print(add_numbers(x, y))