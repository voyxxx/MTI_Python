import random
import telebot
from bot_token import TOKEN
from copy import deepcopy

bot = telebot.TeleBot(TOKEN)

planets = {
    '1': {
        'text': 'Призрачные Спектры - это эфирные существа, живущие планете **Туманность**, полной газов и пыли. Основной ресурс - редкий газ, используемые для межзвездных путешествий. Их неспособность физически защищать свои ресурсы делает их уязвимыми для краж. Слабость: Незаметно украсть.',
        'species': 'призрачные спектры',
        'planet': 'туманность',
        'resource': 'редкий газ'
        },
    '2': {
        'text': 'Бронированные Титаны - это мощные существа, обитающие на планете-гиганте **Титан-7**, покрытой мощной броней. Основной ресурс - металлы и минералы, используемые для производства оружия и брони. Их жадность и склонность к роскоши делает их уязвимыми для покупки. Слабость: Купить.',
        'species': 'бронированные титаны',
        'planet': 'титан-7',
        'resource': 'металлы и минералы',
    },
    '3': {
        'text': 'Мирные Зеффиры - это существа, живущие в гармонии с природой на планете Зефир-9 с сильными ветрами. Основной ресурс - энергия ветра, используемая для выработки электроэнергии. Их неспособность защитить свои ресурсы от силового захвата делает их уязвимыми для отобрать силой. Слабость: Отобрать силой.',
        'species': 'мирные зеффиры',
        'planet': 'зефир-9',
        'resource': 'энергия ветра',
    },
    '4': {
        'text': 'Хитроумные Трикстеры - это умные и коварные существа, населяющие планету-лабиринт Триксис. Основной ресурс - редкие кристаллы, используемые для создания передовых технологий. Их ресурсы можно легко украсть, если вы хитрее их. Слабость: Незаметно украсть.',
        'species': 'хитроумные трикстеры',
        'planet': 'триксис',
        'resource': 'редкие кристаллы',
    },
    '5': {
        'text': 'Богатые Плутократы - это богатые и могущественные существа, контролирующие богатую планету Плутократия. Основной ресурс - драгоценные металлы и камни, используемые для создания ювелирных изделий и денег. Их жадность делает их уязвимыми для краж и покупок. Слабость: Незаметно украсть, Купить.',
        'species': 'богатые плутократы',
        'planet': 'плутократия',
        'resource': 'драгоценные металлы и камни',
    },
    '6': {
        'text': 'Воинственные Берсеркеры - это агрессивные существа, населяющие планету-вулкан Берсерк. Основной ресурс - огонь и лава, используемые для производства оружия и энергии. Их агрессивность и неспособность контролировать свои эмоции делает их уязвимыми для обмана и краж. Слабость: Незаметно украсть, Отобрать силой.',
        'species': 'воинственные берсеркеры',
        'planet': 'берсерк',
        'resource': 'огонь и лава',
    },
    '7': {
        'text': 'Землекопы Гномы - это трудолюбивые существа, живущие на подземной планете Гномония. Основной ресурс - драгоценные металлы и камни, добываемые в подземных шахтах. Их ресурсы легко можно купить, но их подземные туннели делают их уязвимыми для краж. Слабость: Незаметно украсть, Купить.',
        'species': 'землекопы гномы',
        'planet': 'гномония',
        'resource': 'драгоценные металлы и камни',
    },
    '8': {
        'text': 'Знатоки Прометея - это высокоразвитые существа, населяющие планету Прометей. Основной ресурс Прометея - это технологии и инновации. Эти существа обладают невероятной способностью к изобретениям и созданию передовых технологий. Планета Прометей покрыта футуристическими городами и лабораториями, где Знатоки неустанно работают над созданием новых изобретений. Они постоянно стремятся к совершенству и не останавливаются перед ничтожными препятствиями. Однако, их поглощенность работой и изобретениями делает их уязвимыми для внешних атак. Они не имеют сильной армии или защитных систем. Слабость: Отобрать силой, незаметно украсть.',
        'species': 'знатоки прометея',
        'planet': 'прометей',
        'resource': 'технологии и инновации',
    },
    '9': {
        'text': 'Золотой Рай - это необитаемая планета, покрытая золотыми песками. Основной ресурс - золото, которое может быть использовано для создания ювелирных изделий и денег.',
        'species': '-',
        'planet': 'золотой рай',
        'resource': 'золото',
    },
    '10': {
        'text': 'Ледяная Твердыня - это необитаемая планета, покрытая льдом и снегом. Основной ресурс - вода, которая может быть использована для выращивания растений и поддержания жизни.',
        'species': '-',
        'planet': 'ледяная твердыня',
        'resource': 'вода',
    },
    '11': {
        'text': 'После многих лет путешествий, мы, наконец, достигли планеты Сапиенция, населенной мудрыми и всезнающими существами. Эта планета, покрытая огромными библиотеками, является источником мудрости и знаний во всей галактике. Жители Сапиенции, известные как Сапиенты, обладают невероятной способностью к обучению и пониманию всего вокруг них. Основной ресурс Сапиенции - это знания и информация, хранящиеся в библиотеках. Мы рады, что наконец-то достигли этой планеты, и не можем дождаться, чтобы начать наше обучение с Сапиентами. Это действительно чудесное место, и мы знаем, что мы вернемся домой с несметным количеством знаний и мудрости.'
    },
}

questions = {
    '1': 'С какой планеты вы прибыли?',
    '2': 'Какой основной ресурс на планете?', # добавить в вопрос конкретную планету
    '3': 'На какой планете обитает раса ?', # добавить в вопрос расу
}


locations = {
    '0': {
        'text': 'Вы готовы отправиться в путешествие к самой мудрой и всезнающей цивилизации во вселенной? Планета, населенная существами, которые собрали все знания и информацию во вселенной в огромные библиотеки, ожидает вас. Вы сможете обучаться у этих мудрых существ и получить доступ к несметным знаниям и мудрости.',
    },
    '1': {
        'text': '',
        'isVisited': 'false',
        'distances': {
            '2': 3,
            '3': 3,
            '4': 6,
            '5': 6,
            '6': 9,
            '7': 9,
            '8': 12,
            '9': 15,
            '10': 6,
            '11': 16
        },        
    },
    '2': {
        'text': '',
        'isVisited': 'false',
        'distances': {
            '1': 3,
            '3': 6,
            '4': 3,
            '5': 9,
            '6': 6,
            '7': 12,
            '8': 9,
            '9': 12,
            '10': 6,
            '11': 16
        },
    },
    '3': {
        'text': '',
        'isVisited': 'false',
        'distances': {
            '1': 3,
            '2': 6,
            '4': 9,
            '5': 3,
            '6': 12,
            '7': 6,
            '8': 9,
            '9': 12,
            '10': 6,
            '11': 16
        },
    },
    '4': {
        'text': '',
        'isVisited': 'false',
        'distances': {
            '1': 6,
            '2': 3,
            '3': 9,
            '5': 12,
            '6': 3,
            '7': 9,
            '8': 6,
            '9': 9,
            '10': 9,
            '11': 19
        },
    },
    '5': {
        'text': '',
        'isVisited': 'false',
        'distances': {
            '1': 6,
            '2': 9,
            '3': 3,
            '4': 12,
            '6': 9,
            '7': 3,
            '8': 6,
            '9': 9,
            '10': 9,
            '11': 19
        },
    },
    '6': {
        'text': '',
        'isVisited': 'false',
        'distances': {
            '1': 9,
            '2': 6,
            '3': 12,
            '4': 3,
            '5': 9,
            '7': 6,
            '8': 3,
            '9': 6,
            '10': 12,
            '11': 16
        },
    },
    '7': {
        'text': '',
        'isVisited': 'false',
        'distances': {
            '1': 9,
            '2': 12,
            '3': 6,
            '4': 9,
            '5': 3,
            '6': 6,
            '8': 3,
            '9': 6,
            '10': 12,
            '11': 16
        },
    },
    '8': {
        'text': '',
        'isVisited': 'false',
        'distances': {
            '1': 12,
            '2': 9,
            '3': 9,
            '4': 6,
            '5': 6,
            '6': 3,
            '7': 3,
            '9': 6,
            '10': 15,
            '11': 16
        },
    },
    '9': {
        'text': '',
        'isVisited': 'false',
        'distances': {
            '1': 15,
            '2': 12,
            '3': 12,
            '4': 9,
            '5': 9,
            '6': 6,
            '7': 6,
            '8': 6,
            '10': 18,
            '11': 10
        },
    },
    '10': {
        'text': '',
        'isVisited': 'false',
        'distances': {
            '1': 6,
            '2': 6,
            '3': 6,
            '4': 9,
            '5': 9,
            '6': 12,
            '7': 12,
            '8': 15,
            '9': 18,
            '11': 10
        },
    },
    '11': {
        'text': '',
        'isVisited': 'false',
        'distances': {
            '1': 16,
            '2': 16,
            '3': 16,
            '4': 19,
            '5': 19,
            '6': 16,
            '7': 16,
            '8': 16,
            '9': 10,
            '10': 10
        }
    }
}

game_locations = {}

def getReward():
    return random.randint(1, 5)

def getPenalty():
    return random.randint(1, 3)

players = {
    'player1': {
        'name': 'Сильный',
        'power': 5,
        'agilty': 0,
        'eloquence': 0
    },
    'player2': {
        'name': 'Ловкий',
        'power': 0,
        'agilty': 5,
        'eloquence': 0
    },
    'player3': {
        'name': 'Красноречивый',
        'power': 0,
        'agilty': 0,
        'eloquence': 5
    }
}

player = {}

def adjustLocation():
    global locations, planets
    # Перемешиваем значения planets и присваиваем их в новую переменную
    temp_planets = list(deepcopy(planets).values())
    shuffledPlanets = temp_planets[:8]
    random.shuffle(shuffledPlanets)
    shuffledPlanets += temp_planets[8:]
    # Объединяем перемешанные значения planets и locations в один словарь game_locations
    game_locations = deepcopy(locations)
    for key, loc in game_locations.items():
        if (int(key) > 0):
            loc.update(shuffledPlanets[int(key)-1])

# Выбираем случайную расу и планету из списка
def randomChoiceSpeciesAndBirthPlace():
    global player
    birthPlace = deepcopy(random.choice(list(planets.items())[0:8])[1])
    player['birthPlace'] = birthPlace

def startGame(msg):
    # Проверяем, что игра еще не началась
    if player['gameIsOver'] or True:
        player['gameIsOver'] = False
        adjustLocation()
        # Создаем клавиатуру
        keyboard = telebot.types.InlineKeyboardMarkup()
        # Создаем кнопки для выбора аватара
        button = []
        for i in players:
            button.append(telebot.types.InlineKeyboardButton(players[i]['name'], callback_data=i))
        keyboard.add(*button)
        # Отправляем сообщение с кнопками
        bot.send_message(msg.chat.id, f'{locations["0"]["text"]} \nВыберите аватара:', reply_markup=keyboard)        
        #
    else:
        bot.send_message(msg.chat.id, 'игра уже начата')

# Команда для старта бота
@bot.message_handler(commands=['start'])
def start(msg):
    keyboard = telebot.types.ReplyKeyboardMarkup(True)
    keyboard.add('Начать игру')
    bot.send_message(msg.chat.id, f'Привет! Если хочешь сыграть, нажми на кнопку "Начать игру"', reply_markup=keyboard)

# Команда для начала игры
@bot.message_handler(commands=['game'])
def game(msg):
    startGame(msg)

# TODO удалить в финале
@bot.message_handler(func = lambda x: x.text == 'Начать игру')
def game(msg):
    keyboard_remove = telebot.types.ReplyKeyboardRemove()
    bot.send_message(msg.chat.id, 'Удаляем текущую клавиатуру', reply_markup=keyboard_remove)
    startGame(msg)

@bot.callback_query_handler(func=lambda call: call.data in players)
def initPlayer(call):
    id = call.message.chat.id
    global player
    #  TODO остановился здесь
    # 'gameIsOver': True,
    # 'gold': 0,
    player[id] = deepcopy(players[call.data])
    player[id]['loc'] = game_locations
    randomChoiceSpeciesAndBirthPlace()
    answer = f'Вы принадлежите к расе {player["birthPlace"]["species"]} и находитесь планете {player["birthPlace"]["planet"]}'
    bot.send_message(call.message.chat.id, answer)
    print(player)


if __name__ == '__main__':
    bot.infinity_polling()
 
